"use strict";
const fs = require("fs"),
  path = require("path");
const sequelize = require("./db/db");
const socketIo = require("socket.io");
const { Sequelize } = require("sequelize");

require("dotenv").config({
  path: __dirname + "/.env",
});
const bodyParser = require("body-parser");

// Set Global
global.appRoot = __dirname;

const express = require("express");
const cors = require("cors");

// initiate App with express module.
let app = express();
app.use(cors());

sequelize
  .sync()
  .then(() => console.log("Database connected successfully..."))
  .catch((err) => console.log("Error: " + err));

app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

app.use(express.static(path.join(__dirname, "public")));

// Include Services API File
app.use(require("./src/Services"));
app.use(express.static(path.join(__dirname, "./react/dist")));

app.get("*", (req, res) => {
  res.sendFile(path.join(__dirname, "./react/dist/index.html"));
});

/*** Create HTTPs server. ***/
let http_options = {};
let https = require("https");

http_options = {
  ...http_options,
  key: fs.readFileSync("/etc/apache2/ssl/private.key"),
  cert: fs.readFileSync("/etc/apache2/ssl/STAR_brstdev_com.crt"),
  ca: [fs.readFileSync("/etc/apache2/ssl/My_CA_Bundle.ca-bundle")],
};

// var server = https.createServer(http_options, app);

// /*** Get port from environment and store in Express. ***/
// const http_port = process.env.HTTP_PORT || 8007;
// const httpServer = require("http").Server(app);
// httpServer.listen(http_port, function () {
//   console.log(`httpServer App started on port ${http_port}`);
// });

/** Create an HTTPS service identical to the HTTP service. **/
const https_port = process.env.HTTPS_PORT || "8006";
var httpsServer = https.createServer(http_options, app);
// const httpsServer = require("http").Server(app);
httpsServer.listen(https_port, () => {
  console.log(`httpsServer App started on port ${https_port}`);
});


// Initialize Socket.IO and attach it to the HTTPS server
const io = socketIo(httpsServer, {
  cors: {
    origin: "*",  // Allows connections from any origin
    methods: ["GET", "POST"],
  },
});

// Handle Socket.IO connections
io.on("connection", (socket) => {
  console.log("A client connected:", socket.id);


    // Emit a message back to the connected frontend to confirm connection
    socket.emit("connectionSuccess", { message: `Connected as developer ` });
  

  socket.on("messagetoserver", (data) => {
    console.log("Message from client:", data);
  });

  socket.on("disconnect", () => {
    console.log("Client disconnected:", socket.id);
  });
});



app.set('socketio', io); 